#!/usr/bin/env python

import apache_beam
import sys
import unittest

# For another time.
# from apache_beam.pipeline_test import Bacon

from create_pipeline import CreatePipeline
from options import SetPipelineOptions
from streams import ReadStreams
from users import ReadUsers

class TestCreatePipeline(unittest.TestCase):
    def setUp(self): 
        return None

    def test_pipeline_create(self):
        pipeline = CreatePipeline(options=None)
        # bacon = Bacon(pipeline.pipeline)
        # print(bacon)
        self.assertIsInstance(pipeline, apache_beam.Pipeline) 

    def test_pipeline_options(self):
        spo = SetPipelineOptions()
        google_cloud = spo.config.get('google_cloud')
        spo.options = spo.set_pipeline()
        spo.set_google_cloud_options(google_cloud, spo.options)
        options = spo.set_runner(spo.options, spo.config.get('standard').get('runner')) 
        pipeline = CreatePipeline(options=options)
        self.assertIsInstance(pipeline, apache_beam.Pipeline)
        
    
class TestOptions(unittest.TestCase):
    def setUp(self):
        return None 

    def test_instantiate_class(self):
        options = SetPipelineOptions() 
        self.assertIsInstance(options, SetPipelineOptions) 

    def test_set_google_cloud_options(self):
        gco = SetPipelineOptions()
        google_cloud = gco.config.get("google_cloud")
        gco.pipeline = gco.set_pipeline()
        results = gco.set_google_cloud_options(google_cloud, gco.pipeline)
        self.assertIsInstance(results, apache_beam.utils.pipeline_options.GoogleCloudOptions)

    def test_set_pipeline(self): 
        pipeline = SetPipelineOptions().set_pipeline() 
        self.assertIsInstance(pipeline, apache_beam.utils.pipeline_options.PipelineOptions)

    def test_set_runner(self):
        set_pipeline_options = SetPipelineOptions()
        options = set_pipeline_options.set_pipeline() 
        runner = set_pipeline_options.set_runner(options, 'DataflowRunner')
        self.assertIsInstance(runner, apache_beam.utils.pipeline_options.PipelineOptions)
        

class TestReads(unittest.TestCase):
    pipeline = ""

    def setUp(self):
        options = SetPipelineOptions()
        google_cloud = options.config.get('google_cloud')
        runner = options.config.get('standard').get('runner')
        options.pipeline = options.set_pipeline()
        options.set_google_cloud_options(google_cloud, options.pipeline)
        options = options.set_runner(options.pipeline, runner)
        self.pipeline = CreatePipeline(options=options).pipeline

    def test_read_streams(self):
        rs = ReadStreams()    
        streams = rs.read_streams(self.pipeline)
        self.assertIsInstance(streams, apache_beam.pvalue.PCollection)
    
    def test_map_streams(self):
        rs = ReadStreams()
        streams = rs.read_streams(self.pipeline)
        streams = rs.map_streams(streams)
        self.assertIsInstance(streams, apache_beam.pvalue.PCollection)

    def test_read_users(self):
        ru = ReadUsers()
        users = ru.read_users(self.pipeline)
        self.assertIsInstance(users, apache_beam.pvalue.PCollection)

    def test_map_users(self):
        ru = ReadUsers()
        users = ru.read_users(self.pipeline)
        users = ru.map_users(users)
        self.assertIsInstance(users, apache_beam.pvalue.PCollection)

class TestTracksRead(unittest.TestCase):
    def __init__():
       pass 

test_create_pipeline = unittest.TestLoader().loadTestsFromTestCase(TestCreatePipeline)
test_options = unittest.TestLoader().loadTestsFromTestCase(TestOptions)
test_reads = unittest.TestLoader().loadTestsFromTestCase(TestReads)

suite = unittest.TestSuite([
    test_create_pipeline,
    test_options,
    test_reads,
])
results = unittest.TextTestRunner(verbosity=5).run(suite)

if len(results.failures) > 0 or len(results.errors) > 0:
    sys.exit(143)
